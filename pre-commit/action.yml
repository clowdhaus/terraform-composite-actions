name: pre-commit
description: Execute pre-commit for Terraform codebase
inputs:
  terraform-version:
    description: Terraform version supported for use in evaluation
    required: true
  terraform-docs-version:
    description: Version of terraform-docs to use when evaluating checks
    required: false
    default: v0.16.0
  terraform-architecture:
    description: Terraform architecture to use when evaluating checks
    required: false
    default: amd64
  tflint-version:
    description: Version of tflint to use when evaluating checks
    required: false
    default: latest
  args:
    description: Arguments to pass to pre-commit
    required: false
    default: '--all-files --color always --show-diff-on-failure'
  install-hcledit:
    description: Install hcledit for pre-commit
    required: false
    default: 'false'
  hcledit-version:
    description: Version of hcledit to install when `install-hcledit` is true
    required: false
    default: 0.2.10
  install-tfsec:
    description: Install tfsec for pre-commit
    required: false
    default: 'false'
  tfsec-version:
    description: Version of tfsec to install when `install-tfsec` is true
    required: false
    default: 1.28.5

runs:
  using: composite
  steps:
    - name: Install Terraform v${{ inputs.terraform-version }}
      shell: bash
      run: |
        rm -rf $(which terraform)
        curl --retry 3 --retry-all-errors --retry-delay 3 -sSO https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_linux_${{  inputs.terraform-architecture  }}.zip
        sudo unzip -qq terraform_${{ inputs.terraform-version }}_linux_${{  inputs.terraform-architecture  }}.zip terraform -d /usr/bin/
        rm terraform_${{ inputs.terraform-version }}_linux_${{  inputs.terraform-architecture  }}.zip 2> /dev/null

    - name: Install pre-commit dependencies
      shell: bash
      run: |
        pip install -q pre-commit

        curl --retry 3 --retry-all-errors --retry-delay 3 -sSLo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/${{ inputs.terraform-docs-version }}/terraform-docs-${{ inputs.terraform-docs-version }}-$(uname)-${{  inputs.terraform-architecture  }}.tar.gz
        sudo tar -xzf terraform-docs.tar.gz -C /usr/bin/ terraform-docs
        rm terraform-docs.tar.gz 2> /dev/null
        rm -rf $(which tflint)

        if [[ "${{ inputs.tflint-version }}" == "latest" ]]; then
          curl --retry 3 --retry-all-errors --retry-delay 3 -sSL "$(curl --retry 3 --retry-all-errors --retry-delay 3 -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_${{  inputs.terraform-architecture  }}.zip")" > tflint.zip
        else
          curl --retry 3 --retry-all-errors --retry-delay 3 -sSLo ./tflint.zip https://github.com/terraform-linters/tflint/releases/download/${{ inputs.tflint-version }}/tflint_linux_${{  inputs.terraform-architecture  }}.zip
        fi
        sudo unzip -qq tflint.zip tflint -d /usr/bin/
        rm tflint.zip 2> /dev/null

        if [[ "${{ inputs.install-hcledit }}" == "true" ]]; then
          curl --retry 3 --retry-all-errors --retry-delay 3 -sSLo ./hcledit.tar.gz https://github.com/minamijoyo/hcledit/releases/download/v${{ inputs.hcledit-version }}/hcledit_${{ inputs.hcledit-version }}_$(uname)_${{  inputs.terraform-architecture  }}.tar.gz
          sudo tar -xzf hcledit.tar.gz -C /usr/bin/ hcledit
          rm hcledit.tar.gz 2> /dev/null
        fi

        if [[ "${{ inputs.install-tfsec }}" == "true" ]]; then
          curl --retry 3 --retry-all-errors --retry-delay 3 -sSLo ./tfsec.tar.gz https://github.com/aquasecurity/tfsec/releases/download/v${{ inputs.tfsec-version }}/tfsec_${{ inputs.tfsec-version }}_$(uname)_${{  inputs.terraform-architecture  }}.tar.gz
          sudo tar -xzf tfsec.tar.gz -C /usr/bin/ tfsec tfsec-checkgen
          rm tfsec.tar.gz 2> /dev/null
        fi

    - name: Execute pre-commit
      shell: bash
      run: pre-commit run ${{ inputs.args }}
